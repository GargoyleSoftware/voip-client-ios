.TH "Controlling media parameters" 3 "Mon Feb 6 2012" "Version 3.5.0" "liblinphone" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Controlling media parameters \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBlinphone_core_set_download_bandwidth\fP (\fBLinphoneCore\fP *lc, int bw)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_upload_bandwidth\fP (\fBLinphoneCore\fP *lc, int bw)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_download_bandwidth\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_upload_bandwidth\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_set_audio_codecs\fP (\fBLinphoneCore\fP *lc, MSList *codecs)"
.br
.ti -1c
.RI "int \fBlinphone_core_set_video_codecs\fP (\fBLinphoneCore\fP *lc, MSList *codecs)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_audio_jittcomp\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_nortp_timeout\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_audio_jittcomp\fP (\fBLinphoneCore\fP *lc, int value)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_nortp_timeout\fP (\fBLinphoneCore\fP *lc, int nortp_timeout)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_get_use_info_for_dtmf\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_use_info_for_dtmf\fP (\fBLinphoneCore\fP *lc, bool_t use_info)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_get_use_rfc2833_for_dtmf\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_use_rfc2833_for_dtmf\fP (\fBLinphoneCore\fP *lc, bool_t use_rfc2833)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_play_level\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_ring_level\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_rec_level\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_ring_level\fP (\fBLinphoneCore\fP *lc, int level)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_playback_gain_db\fP (\fBLinphoneCore\fP *lc, float gaindb)"
.br
.ti -1c
.RI "float \fBlinphone_core_get_playback_gain_db\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_play_level\fP (\fBLinphoneCore\fP *lc, int level)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_rec_level\fP (\fBLinphoneCore\fP *lc, int level)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_sound_device_can_capture\fP (\fBLinphoneCore\fP *lc, const char *devid)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_sound_device_can_playback\fP (\fBLinphoneCore\fP *lc, const char *devid)"
.br
.ti -1c
.RI "int \fBlinphone_core_set_ringer_device\fP (\fBLinphoneCore\fP *lc, const char *devid)"
.br
.ti -1c
.RI "int \fBlinphone_core_set_playback_device\fP (\fBLinphoneCore\fP *lc, const char *devid)"
.br
.ti -1c
.RI "int \fBlinphone_core_set_capture_device\fP (\fBLinphoneCore\fP *lc, const char *devid)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_ringer_device\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_playback_device\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_capture_device\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "const char ** \fBlinphone_core_get_sound_devices\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "const char ** \fBlinphone_core_get_video_devices\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_ring\fP (\fBLinphoneCore\fP *lc, const char *path)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_ring\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_root_ca\fP (\fBLinphoneCore\fP *lc, const char *path)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_ringback\fP (\fBLinphoneCore\fP *lc, const char *path)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_ringback\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_echo_cancellation\fP (\fBLinphoneCore\fP *lc, bool_t val)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_echo_cancellation_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_mute_mic\fP (\fBLinphoneCore\fP *lc, bool_t val)"
.br
.ti -1c
.RI "void \fBlinphone_core_send_dtmf\fP (\fBLinphoneCore\fP *lc, char dtmf)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_video\fP (\fBLinphoneCore\fP *lc, bool_t vcap_enabled, bool_t display_enabled)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_video_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_video_preview\fP (\fBLinphoneCore\fP *lc, bool_t val)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_video_preview_enabled\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_self_view\fP (\fBLinphoneCore\fP *lc, bool_t val)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_self_view_enabled\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_set_video_device\fP (\fBLinphoneCore\fP *lc, const char *id)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_video_device\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "unsigned long \fBlinphone_core_get_native_video_window_id\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_native_video_window_id\fP (\fBLinphoneCore\fP *lc, unsigned long id)"
.br
.ti -1c
.RI "unsigned long \fBlinphone_core_get_native_preview_window_id\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_native_preview_window_id\fP (\fBLinphoneCore\fP *lc, unsigned long id)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_device_rotation\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_device_rotation\fP (\fBLinphoneCore\fP *lc, int rotation)"
.br
.ti -1c
.RI "const MSVideoSizeDef * \fBlinphone_core_get_supported_video_sizes\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_preferred_video_size\fP (\fBLinphoneCore\fP *lc, MSVideoSize vsize)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_preferred_video_size_by_name\fP (\fBLinphoneCore\fP *lc, const char *name)"
.br
.ti -1c
.RI "MSVideoSize \fBlinphone_core_get_preferred_video_size\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_play_dtmf\fP (\fBLinphoneCore\fP *lc, char dtmf, int duration_ms)"
.br
.ti -1c
.RI "void \fBlinphone_core_play_tone\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_stop_dtmf\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "PayloadType * \fBlinphone_core_find_payload_type\fP (\fBLinphoneCore\fP *lc, const char *type, int rate)"
.br
.ti -1c
.RI "void \fBlinphone_call_enable_echo_cancellation\fP (LinphoneCall *call, bool_t val)"
.br
.ti -1c
.RI "bool_t \fBlinphone_call_echo_cancellation_enabled\fP (LinphoneCall *lc)"
.br
.ti -1c
.RI "void \fBlinphone_call_enable_echo_limiter\fP (LinphoneCall *call, bool_t val)"
.br
.ti -1c
.RI "bool_t \fBlinphone_call_echo_limiter_enabled\fP (const LinphoneCall *call)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_download_ptime\fP (\fBLinphoneCore\fP *lc, int ptime)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_download_ptime\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_is_mic_muted\fP (\fBLinphoneCore\fP *lc)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void linphone_core_set_download_bandwidth (\fBLinphoneCore\fP *lc, intbw)"Sets maximum available download bandwidth
.PP
This is IP bandwidth, in kbit/s'\&. This information is used signaled to other parties during calls (within SDP messages) so that the remote end can have sufficient knowledge to properly configure its audio & video codec output bitrate to not overflow available bandwidth'\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore object 
.br
\fIbw\fP the bandwidth in kbits/s, 0 for infinite 
.RE
.PP

.SS "void linphone_core_set_upload_bandwidth (\fBLinphoneCore\fP *lc, intbw)"Sets maximum available upload bandwidth
.PP
This is IP bandwidth, in kbit/s'\&. This information is used by liblinphone together with remote side available bandwidth signaled in SDP messages to properly configure audio & video codec's output bitrate'\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore object 
.br
\fIbw\fP the bandwidth in kbits/s, 0 for infinite 
.RE
.PP

.SS "int linphone_core_get_download_bandwidth (const \fBLinphoneCore\fP *lc)"Retrieve the maximum available download bandwidth'\&.
.PP
This value was set by \fBlinphone_core_set_download_bandwidth()\fP'\&. 
.SS "int linphone_core_get_upload_bandwidth (const \fBLinphoneCore\fP *lc)"Retrieve the maximum available upload bandwidth'\&.
.PP
This value was set by \fBlinphone_core_set_upload_bandwidth()\fP'\&. 
.SS "int linphone_core_set_audio_codecs (\fBLinphoneCore\fP *lc, MSList *codecs)"Sets the list of audio codecs'\&.
.PP
The list is taken by the LinphoneCore thus the application should not free it'\&. This list is made of struct PayloadType describing the codec parameters'\&. 
.SS "int linphone_core_set_video_codecs (\fBLinphoneCore\fP *lc, MSList *codecs)"Sets the list of video codecs'\&.
.PP
The list is taken by the LinphoneCore thus the application should not free it'\&. This list is made of struct PayloadType describing the codec parameters'\&. 
.SS "int linphone_core_get_audio_jittcomp (\fBLinphoneCore\fP *lc)"Returns the nominal jitter buffer size in milliseconds'\&. 
.SS "int linphone_core_get_nortp_timeout (const \fBLinphoneCore\fP *lc)"Returns the value in seconds of the no-rtp timeout'\&.
.PP
When no RTP or RTCP packets have been received for a while LinphoneCore will consider the call is broken (remote end crashed or disconnected from the network), and thus will terminate the call'\&. The no-rtp timeout is the duration above which the call is considered broken'\&. 
.SS "void linphone_core_set_audio_jittcomp (\fBLinphoneCore\fP *lc, intvalue)"Sets the nominal audio jitter buffer size in milliseconds'\&. 
.SS "void linphone_core_set_nortp_timeout (\fBLinphoneCore\fP *lc, intnortp_timeout)"Sets the no-rtp timeout value in seconds'\&.
.PP
See \fBlinphone_core_get_nortp_timeout()\fP for details'\&. 
.SS "bool_t linphone_core_get_use_info_for_dtmf (\fBLinphoneCore\fP *lc)"Indicates whether SIP INFO is used for sending digits'\&. 
.SS "void linphone_core_set_use_info_for_dtmf (\fBLinphoneCore\fP *lc, bool_tuse_info)"Sets whether SIP INFO is to be used for sending digits'\&. 
.SS "bool_t linphone_core_get_use_rfc2833_for_dtmf (\fBLinphoneCore\fP *lc)"Indicates whether RFC2833 is used for sending digits'\&. 
.SS "void linphone_core_set_use_rfc2833_for_dtmf (\fBLinphoneCore\fP *lc, bool_tuse_rfc2833)"Sets whether RFC2833 is to be used for sending digits'\&. 
.SS "int linphone_core_get_play_level (\fBLinphoneCore\fP *lc)"Get playback sound level in 0-100 scale'\&. 
.SS "int linphone_core_get_ring_level (\fBLinphoneCore\fP *lc)"Get ring sound level in 0-100 scale 
.SS "int linphone_core_get_rec_level (\fBLinphoneCore\fP *lc)"Get sound capture level in 0-100 scale 
.SS "void linphone_core_set_ring_level (\fBLinphoneCore\fP *lc, intlevel)"Set sound ring level in 0-100 scale 
.SS "void linphone_core_set_playback_gain_db (\fBLinphoneCore\fP *lc, floatgaindb)"Allow to control play level before entering sound card: gain in db 
.SS "float linphone_core_get_playback_gain_db (\fBLinphoneCore\fP *lc)"Get playback gain in db before entering sound card'\&. 
.SS "void linphone_core_set_play_level (\fBLinphoneCore\fP *lc, intlevel)"Set sound playback level in 0-100 scale 
.SS "void linphone_core_set_rec_level (\fBLinphoneCore\fP *lc, intlevel)"Set sound capture level in 0-100 scale 
.SS "bool_t linphone_core_sound_device_can_capture (\fBLinphoneCore\fP *lc, const char *devid)"Returns true if the specified sound device can capture sound'\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIdevid\fP the device name as returned by \fBlinphone_core_get_sound_devices()\fP 
.RE
.PP

.SS "bool_t linphone_core_sound_device_can_playback (\fBLinphoneCore\fP *lc, const char *devid)"Returns true if the specified sound device can play sound'\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIdevid\fP the device name as returned by \fBlinphone_core_get_sound_devices()\fP 
.RE
.PP

.SS "int linphone_core_set_ringer_device (\fBLinphoneCore\fP *lc, const char *devid)"Sets the sound device used for ringing'\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIdevid\fP the device name as returned by \fBlinphone_core_get_sound_devices()\fP 
.RE
.PP

.SS "int linphone_core_set_playback_device (\fBLinphoneCore\fP *lc, const char *devid)"Sets the sound device used for playback'\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIdevid\fP the device name as returned by \fBlinphone_core_get_sound_devices()\fP 
.RE
.PP

.SS "int linphone_core_set_capture_device (\fBLinphoneCore\fP *lc, const char *devid)"Sets the sound device used for capture'\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIdevid\fP the device name as returned by \fBlinphone_core_get_sound_devices()\fP 
.RE
.PP

.SS "const char* linphone_core_get_ringer_device (\fBLinphoneCore\fP *lc)"Returns the name of the currently assigned sound device for ringing'\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP

.SS "const char* linphone_core_get_playback_device (\fBLinphoneCore\fP *lc)"Returns the name of the currently assigned sound device for playback'\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP

.SS "const char* linphone_core_get_capture_device (\fBLinphoneCore\fP *lc)"Returns the name of the currently assigned sound device for capture'\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP

.SS "const char** linphone_core_get_sound_devices (\fBLinphoneCore\fP *lc)"Returns an unmodifiable array of available sound devices'\&.
.PP
The array is NULL terminated'\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP

.SS "const char** linphone_core_get_video_devices (const \fBLinphoneCore\fP *lc)"Returns an unmodifiable array of available video capture devices'\&.
.PP
The array is NULL terminated'\&. 
.SS "void linphone_core_set_ring (\fBLinphoneCore\fP *lc, const char *path)"Sets the path to a wav file used for ringing'\&.
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP The file must be a wav 16bit linear'\&. Local ring is disabled if null 
.br
\fIlc\fP The LinphoneCore object 
.RE
.PP

.SS "const char* linphone_core_get_ring (const \fBLinphoneCore\fP *lc)"Returns the path to the wav file used for ringing'\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP

.SS "void linphone_core_set_root_ca (\fBLinphoneCore\fP *lc, const char *path)"Sets the path to a file or folder containing trusted root CAs (PEM format)
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP 
.br
\fIlc\fP The LinphoneCore object 
.RE
.PP

.SS "void linphone_core_set_ringback (\fBLinphoneCore\fP *lc, const char *path)"Sets the path to a wav file used for ringing back'\&.
.PP
Ringback means the ring that is heard when it's ringing at the remote party'\&. The file must be a wav 16bit linear'\&. 
.SS "const char* linphone_core_get_ringback (const \fBLinphoneCore\fP *lc)"Returns the path to the wav file used for ringing back'\&. 
.SS "void linphone_core_enable_echo_cancellation (\fBLinphoneCore\fP *lc, bool_tval)"Enables or disable echo cancellation'\&. Value is saved an used for subsequent calls 
.SS "bool_t linphone_core_echo_cancellation_enabled (\fBLinphoneCore\fP *lc)"Returns TRUE if echo cancellation is enabled'\&. 
.SS "void linphone_core_mute_mic (\fBLinphoneCore\fP *lc, bool_tval)"Mutes or unmutes the local microphone'\&. 
.SS "void linphone_core_send_dtmf (\fBLinphoneCore\fP *lc, chardtmf)"Send the specified dtmf'\&.
.PP
This function only works during calls'\&. The dtmf is automatically played to the user'\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIdtmf\fP The dtmf name specified as a char, such as '0', '#' etc'\&.'\&.'\&. 
.RE
.PP

.SS "void linphone_core_enable_video (\fBLinphoneCore\fP *lc, bool_tvcap_enabled, bool_tdisplay_enabled)"Enables video globally'\&.
.PP
This function does not have any effect during calls'\&. It just indicates LinphoneCore to initiate future calls with video or not'\&. The two boolean parameters indicate in which direction video is enabled'\&. Setting both to false disables video entirely'\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIvcap_enabled\fP indicates whether video capture is enabled 
.br
\fIdisplay_enabled\fP indicates whether video display should be shown 
.RE
.PP

.SS "bool_t linphone_core_video_enabled (\fBLinphoneCore\fP *lc)"Returns TRUE if video is enabled, FALSE otherwise'\&. 
.SS "void linphone_core_enable_video_preview (\fBLinphoneCore\fP *lc, bool_tval)"Controls video preview enablement'\&.
.PP
Video preview refers to the action of displaying the local webcam image to the user while not in call'\&. 
.SS "bool_t linphone_core_video_preview_enabled (const \fBLinphoneCore\fP *lc)"Returns TRUE if video previewing is enabled'\&. 
.SS "void linphone_core_enable_self_view (\fBLinphoneCore\fP *lc, bool_tval)"Enables or disable self view during calls'\&.
.PP
Self-view refers to having local webcam image inserted in corner of the video window during calls'\&. This function works at any time, including during calls'\&. 
.SS "bool_t linphone_core_self_view_enabled (const \fBLinphoneCore\fP *lc)"Returns TRUE if self-view is enabled, FALSE otherwise'\&.
.PP
Refer to \fBlinphone_core_enable_self_view()\fP for details'\&. 
.SS "int linphone_core_set_video_device (\fBLinphoneCore\fP *lc, const char *id)"Sets the active video device'\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIid\fP the name of the video device as returned by \fBlinphone_core_get_video_devices()\fP 
.RE
.PP

.SS "const char* linphone_core_get_video_device (const \fBLinphoneCore\fP *lc)"Returns the name of the currently active video device'\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP

.SS "unsigned long linphone_core_get_native_video_window_id (const \fBLinphoneCore\fP *lc)"Returns the native window handle of the video window, casted as an unsigned long'\&. 
.SS "void linphone_core_set_native_video_window_id (\fBLinphoneCore\fP *lc, unsigned longid)"Set the native video window id where the video is to be displayed'\&. If not set the core will create its own window'\&. 
.SS "unsigned long linphone_core_get_native_preview_window_id (const \fBLinphoneCore\fP *lc)"Returns the native window handle of the video preview window, casted as an unsigned long'\&. 
.SS "void linphone_core_set_native_preview_window_id (\fBLinphoneCore\fP *lc, unsigned longid)"Set the native window id where the preview video (local camera) is to be displayed'\&. This has to be used in conjonction with linphone_core_use_preview_window()'\&. If not set the core will create its own window'\&. 
.SS "int linphone_core_get_device_rotation (\fBLinphoneCore\fP *lc)"returns current device orientation 
.SS "void linphone_core_set_device_rotation (\fBLinphoneCore\fP *lc, introtation)"Tells the core the device current orientation'\&. This can be used by capture filters on mobile devices to select between portrait/landscape mode and to produce properly oriented images'\&. The exact meaning of the value in rotation if left to each device specific implementations'\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP object'\&. 
.br
\fIrotation\fP '\&. IOS supported values are 0 for UIInterfaceOrientationPortrait and 270 for UIInterfaceOrientationLandscapeRight'\&. 
.RE
.PP

.SS "const MSVideoSizeDef* linphone_core_get_supported_video_sizes (\fBLinphoneCore\fP *lc)"Returns the zero terminated table of supported video resolutions'\&. 
.SS "void linphone_core_set_preferred_video_size (\fBLinphoneCore\fP *lc, MSVideoSizevsize)"Sets the preferred video size'\&.
.PP
This applies only to the stream that is captured and sent to the remote party, since we accept all standard video size on the receive path'\&. 
.SS "void linphone_core_set_preferred_video_size_by_name (\fBLinphoneCore\fP *lc, const char *name)"Sets the preferred video size by its name'\&.
.PP
This is identical to \fBlinphone_core_set_preferred_video_size()\fP except that it takes the name of the video resolution as input'\&. Video resolution names are: qcif, svga, cif, vga, 4cif, svga '\&.'\&.'\&. 
.SS "MSVideoSize linphone_core_get_preferred_video_size (\fBLinphoneCore\fP *lc)"Returns the current preferred video size for sending'\&. 
.SS "void linphone_core_play_dtmf (\fBLinphoneCore\fP *lc, chardtmf, intduration_ms)"Plays a dtmf sound to the local user'\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.br
\fIdtmf\fP DTMF to play ['0''\&.'\&.'16'] | '#' | '#' 
.br
\fIduration_ms\fP duration in ms, -1 means play until next further call to \fBlinphone_core_stop_dtmf()\fP 
.RE
.PP

.SS "void linphone_core_play_tone (\fBLinphoneCore\fP *lc)"Plays a repeated tone to the local user until next further call to \fBlinphone_core_stop_dtmf()\fP 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.RE
.PP

.SS "void linphone_core_stop_dtmf (\fBLinphoneCore\fP *lc)"Stops playing a dtmf started by \fBlinphone_core_play_dtmf()\fP'\&. 
.SS "PayloadType* linphone_core_find_payload_type (\fBLinphoneCore\fP *lc, const char *type, intrate)"Get payload type from mime type and clock rate
.PP
This function searches in audio and video codecs for the given payload type name and clockrate'\&. Returns NULL if not found'\&. 
.SS "void linphone_call_enable_echo_cancellation (LinphoneCall *call, bool_tval)"Enables or disable echo cancellation for this call 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP 
.br
\fIval\fP 
.RE
.PP

.SS "bool_t linphone_call_echo_cancellation_enabled (LinphoneCall *lc)"Returns TRUE if echo cancellation is enabled'\&. 
.SS "void linphone_call_enable_echo_limiter (LinphoneCall *call, bool_tval)"Enables or disable echo limiter for this call 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP 
.br
\fIval\fP 
.RE
.PP

.SS "bool_t linphone_call_echo_limiter_enabled (const LinphoneCall *call)"Returns TRUE if echo limiter is enabled'\&. 
.SS "void linphone_core_set_download_ptime (\fBLinphoneCore\fP *lc, intptime)"set audio packetization time linphone expect to receive from peer
.PP
Set audio packetization time linphone expects to receive from peer 
.SS "int linphone_core_get_download_ptime (\fBLinphoneCore\fP *lc)"get audio packetization time linphone expect to receive from peer, 0 means unspecified
.PP
Get audio packetization time linphone expects to receive from peer 
.SS "bool_t linphone_core_is_mic_muted (\fBLinphoneCore\fP *lc)"return mic state'\&.
.PP
Returns whether microphone is muted'\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for liblinphone from the source code'\&.
