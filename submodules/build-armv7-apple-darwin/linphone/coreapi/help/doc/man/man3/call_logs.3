.TH "Managing call logs" 3 "Mon Feb 6 2012" "Version 3.5.0" "liblinphone" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Managing call logs \- 
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_LinphoneCallLog\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fB_LinphoneCallDir\fP \fBLinphoneCallDir\fP"
.br
.ti -1c
.RI "typedef enum \fB_LinphoneCallStatus\fP \fBLinphoneCallStatus\fP"
.br
.ti -1c
.RI "typedef struct \fB_LinphoneCallLog\fP \fBLinphoneCallLog\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_LinphoneCallDir\fP { \fBLinphoneCallOutgoing\fP, \fBLinphoneCallIncoming\fP }"
.br
.ti -1c
.RI "enum \fB_LinphoneCallStatus\fP { \fBLinphoneCallSuccess\fP, \fBLinphoneCallAborted\fP, \fBLinphoneCallMissed\fP, \fBLinphoneCallDeclined\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "char * \fBlinphone_call_log_to_str\fP (\fBLinphoneCallLog\fP *cl)"
.br
.ti -1c
.RI "const rtp_stats_t * \fBlinphone_call_log_get_local_stats\fP (const \fBLinphoneCallLog\fP *cl)"
.br
.ti -1c
.RI "const rtp_stats_t * \fBlinphone_call_log_get_remote_stats\fP (const \fBLinphoneCallLog\fP *cl)"
.br
.ti -1c
.RI "void \fBlinphone_call_log_set_ref_key\fP (\fBLinphoneCallLog\fP *cl, const char *refkey)"
.br
.ti -1c
.RI "const char * \fBlinphone_call_log_get_ref_key\fP (const \fBLinphoneCallLog\fP *cl)"
.br
.ti -1c
.RI "const MSList * \fBlinphone_core_get_call_logs\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_clear_call_logs\fP (\fBLinphoneCore\fP *lc)"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fB_LinphoneCallDir\fP \fBLinphoneCallDir\fP"Typedef for enum 
.SS "typedef enum \fB_LinphoneCallStatus\fP  \fBLinphoneCallStatus\fP"Enum representing the status of a call 
.SS "typedef struct \fB_LinphoneCallLog\fP  \fBLinphoneCallLog\fP"Structure representing a call log'\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fB_LinphoneCallDir\fP"Enum representing the direction of a call'\&. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fILinphoneCallOutgoing \fP\fP
outgoing calls 
.TP
\fB\fILinphoneCallIncoming \fP\fP
incoming calls 
.SS "enum \fB_LinphoneCallStatus\fP"Enum representing the status of a call 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fILinphoneCallSuccess \fP\fP
The call was sucessful 
.TP
\fB\fILinphoneCallAborted \fP\fP
The call was aborted 
.TP
\fB\fILinphoneCallMissed \fP\fP
The call was missed (unanswered) 
.TP
\fB\fILinphoneCallDeclined \fP\fP
The call was declined, either locally or by remote end 
.SH "Function Documentation"
.PP 
.SS "char* linphone_call_log_to_str (\fBLinphoneCallLog\fP *cl)"Returns a human readable string describing the call'\&.
.PP
\fBNote:\fP
.RS 4
: the returned char* must be freed by the application (use ms_free())'\&. 
.RE
.PP

.SS "const rtp_stats_t* linphone_call_log_get_local_stats (const \fBLinphoneCallLog\fP *cl)"Returns RTP statistics computed locally regarding the call'\&. 
.SS "const rtp_stats_t* linphone_call_log_get_remote_stats (const \fBLinphoneCallLog\fP *cl)"Returns RTP statistics computed by remote end and sent back via RTCP'\&.
.PP
\fBNote:\fP
.RS 4
Not implemented yet'\&. 
.RE
.PP

.SS "void linphone_call_log_set_ref_key (\fBLinphoneCallLog\fP *cl, const char *refkey)"Associate a persistent reference key to the call log'\&.
.PP
The reference key can be for example an id to an external database'\&. It is stored in the config file, thus can survive to process exits/restarts'\&. 
.SS "const char* linphone_call_log_get_ref_key (const \fBLinphoneCallLog\fP *cl)"Get the persistent reference key associated to the call log'\&.
.PP
The reference key can be for example an id to an external database'\&. It is stored in the config file, thus can survive to process exits/restarts'\&. 
.SS "const MSList* linphone_core_get_call_logs (\fBLinphoneCore\fP *lc)"Get the list of call logs (past calls)'\&. 
.SS "void linphone_core_clear_call_logs (\fBLinphoneCore\fP *lc)"Erase the call log'\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for liblinphone from the source code'\&.
