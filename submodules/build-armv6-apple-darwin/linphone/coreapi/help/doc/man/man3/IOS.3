.TH "IOS" 3 "Mon Feb 6 2012" "Version 3.5.0" "liblinphone" \" -*- nroff -*-
.ad l
.nh
.SH NAME
IOS \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBlinphone_core_start_dtmf_stream\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_stop_dtmf_stream\fP (\fBLinphoneCore\fP *lc)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.br
 \fBMultitasking\fP 
.br
 Liblinphone for IOS natively supports multitasking assuming application follows multitasking guides provided by Apple'\&. First step is to declare application as multitasked'\&. It means adding background mode for both audio and voip to Info'\&.plist file'\&. 
.br
 
.PP
.nf
   <key>UIBackgroundModes</key>
        <array>
                <string>voip</string>
                <string>audio</string>
        </array>

.fi
.PP
 
.br
 
.PD 0

.IP "\(bu" 2
\fBSIP socket \fP
.br
Recommended mode is SIP over TCP, because UDP usually requires frequent keep alives for maintaining NAT association at the IP router level'\&. This can be as frequent as one UDP packet every 15 seconds to maintain the NAT association accross NAT routers'\&. Doing such drains the battery very fast, and furthermore the iOS keep-alive designed by Apple to handle this task can only be called with a minimum of 10 minutes interval'\&.
.br
 For TCP, liblinphone automatically configures SIP socket for voip (I'\&.E kCFStreamNetworkServiceType set to kCFStreamNetworkServiceTypeVoIP)'\&. 
.br
\fBSince IOS > 4'\&.1 Apple disabled voip mode for UDP sockets \fP 
.IP "\(bu" 2
\fBEntering background mode\fP 
.br
 Before entering in background mode (through 
.PP
.nf
 - (void)applicationDidEnterBackground:(UIApplication *)application 

.fi
.PP
 ), the application must first refresh sip registration using function \fBlinphone_core_refresh_registers()\fP; and register a keep-alive handler for periodically refreshing the registration'\&. The speudo code below shows how to register a keep alive handler: 
.PP
.nf
        //First refresh registration
        linphone_core_refresh_registers(theLinphoneCore);
        //wait for registration answer
        int i=0;
        while (!linphone_proxy_config_is_registered(proxyCfg) && i++<40 ) {
                linphone_core_iterate(theLinphoneCore);
                usleep(100000);
        }
        //register keepalive handler
        [[UIApplication sharedApplication] setKeepAliveTimeout:600/*minimal interval is 600 s*/ 
                                                       handler:^{
                                                                //refresh sip registration
                                                                linphone_core_refresh_registers(theLinphoneCore);
                                                                //make sure sip REGISTER is sent
                                                                linphone_core_iterate(theLinphoneCore);
                                                                 }];

.fi
.PP
 
.IP "\(bu" 2
\fBIncoming call notification while in background mode\fP 
.br
Assuming application using liblinphone is well configured for multitasking, incoming calls arriving while liblinphone is in background mode will simply wakeup liblinphone thread but not resume GUI'\&. To wakeup GUI, it is recommended to send a Local Notification to the user from the \fBLinphoneCallStateCb\fP'\&. Here under a speudo code for this operation: 
.PP
.nf
        if ([UIApplication sharedApplication]\&.applicationState !=  UIApplicationStateActive) {
                // Create a new notification
                UILocalNotification* notif = [[[UILocalNotification alloc] init] autorelease];
                if (notif) {
                        notif\&.repeatInterval = 0;
                        notif\&.alertBody =@'New incoming call';
                        notif\&.alertAction = @'Answer';
                        notif\&.soundName = @'oldphone-mono-30s\&.caf';
                        
                        [[UIApplication sharedApplication]  presentLocalNotificationNow:notif];
                }

.fi
.PP
 
.PP
\fBNetworking\fP 
.br
 
.PD 0

.IP "\(bu" 2
\fBWWAN connection\fP 
.br
Liblinphone relies on iOS's standard BSD socket layer for sip/rtp networking'\&. On IOS, WWAN connection is supposed to automatically bring up on any networking resquest issued by an application'\&. At least on iPhone OS 3'\&.x, BSD sockets do not implement this behavior'\&. So it is recomended to add a special code to make sure the WWAN connection is properly setup'\&. Pseudo code below describes a way to force WWAN connection by setting up a dummy TCP connection'\&. 
.PP
.nf
/*start a new thread to avoid blocking the main ui in case of peer host failure*/
[NSThread detachNewThreadSelector:@selector(runNetworkConnection) toTarget:self withObject:nil];
-(void) runNetworkConnection {
        CFWriteStreamRef writeStream;
        //create a dummy socket
        CFStreamCreatePairWithSocketToHost(NULL, (CFStringRef)@'192\&.168\&.0\&.200', 15000, nil, &writeStream);
        CFWriteStreamOpen (writeStream);
        const char* buff='hello';
        //try to write on this socket
        CFWriteStreamWrite (writeStream,(const UInt8*)buff,strlen(buff));
        CFWriteStreamClose (writeStream);
}       

.fi
.PP
 It is recommanded to perform this task each time the application is woken up, including keep alive handler'\&. 
.IP "\(bu" 2
\fBManaging IP connection state\fP 
.br
Liblinphone for IOS relies on the application to be informed of network connectivity changes'\&. Network state changes when the IP connection moves from DOWN to UP, or from WIFI to WWAN'\&. Applications using liblinphone must inform libliblinphone of this changes using function \fBlinphone_core_set_network_reachable()\fP'\&. Usually this method is called from the IOS NetworkReachability callback'\&. Here under a sample code: 
.PP
.nf
//typical reachability callback
void networkReachabilityCallBack(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags flags, void * info) {
        if ((flags == 0) | (flags & (kSCNetworkReachabilityFlagsConnectionRequired |kSCNetworkReachabilityFlagsConnectionOnTraffic))) {
                //network state is off
                linphone_core_set_network_reachable(lc,false);
                ((LinphoneManager*)info)\&.connectivity = none;
        } else {
                Connectivity  newConnectivity = flags & kSCNetworkReachabilityFlagsIsWWAN ? wwan:wifi;
                if (lLinphoneMgr\&.connectivity == none) {
                        //notify new network state
                        linphone_core_set_network_reachable(lc,true);
                } else if (lLinphoneMgr\&.connectivity != newConnectivity) {
                        // connectivity has changed
                        linphone_core_set_network_reachable(lc,false);
                        linphone_core_set_network_reachable(lc,true);
                }
                //store new connectivity status
                lLinphoneMgr\&.connectivity=newConnectivity;
        }
}
}

.fi
.PP
 
.PP
\fB Sound cards \fP 
.br
 Since IOS 5'\&.0, liblinphone supports 2 sound cards'\&. \fIAU: Audio Unit Receiver\fP based on IO units for voice calls plus \fIAQ: Audio Queue Device\fP dedicated to rings'\&. Here under the recommended settings (I'\&.E default one) 
.PP
.nf
        linphone_core_set_playback_device(lc, 'AU: Audio Unit Receiver');
        linphone_core_set_ringer_device(lc, 'AQ: Audio Queue Device');
        linphone_core_set_capture_device(lc, 'AU: Audio Unit Receiver');

.fi
.PP
 \fB GSM call interaction \fP 
.br
 To ensure gentle interaction with GSM calls, it is recommended to register an AudioSession delegate'\&. This allows the application to be notified when its audio session is interrupted/resumed (presumably by a GSM call)'\&. 
.PP
.nf
    // declare a class handling the AVAudioSessionDelegate protocol
    @interface MyClass : NSObject <AVAudioSessionDelegate> { [\&.\&.\&.] }
    // implement 2 methods : here's an example implementation
    -(void) beginInterruption {
        LinphoneCall* c = linphone_core_get_current_call(theLinphoneCore);
        ms_message('Sound interruption detected!');
        if (c) {
            linphone_core_pause_call(theLinphoneCore, c);
        }
    }

    -(void) endInterruption {
        ms_message('Sound interruption ended!');
        const MSList* c = linphone_core_get_calls(theLinphoneCore);
    
        if (c) {
            ms_message('Auto resuming call');
            linphone_core_resume_call(theLinphoneCore, (LinphoneCall*) c->data);
        }
    }

.fi
.PP
 
.PP
\fBSee also:\fP
.RS 4
http://developer.apple.com/library/ios/#documentation/AVFoundation/Reference/AVAudioSessionDelegate_ProtocolReference/Reference/Reference.html
.RE
.PP

.br
 Declare an instance of your class as AudioSession's delegate : 
.PP
.nf
    [audioSession setDelegate:myClassInstance];

.fi
.PP
 
.PP
\fBSee also:\fP
.RS 4
http://developer.apple.com/library/ios/#documentation/AVFoundation/Reference/AVAudioSession_ClassReference/Reference/Reference.html
.RE
.PP
\fB Video \fP 
.br
Since 3'\&.5 video support has been added to liblinphone for IOS'\&. It requires the application to provide liblinphone with pointers to IOS's views hosting video display and video previous'\&. 
.br
 These 2 UIView objects must be passed to the core using functions \fBlinphone_core_set_native_video_window_id()\fP and \fBlinphone_core_set_native_preview_window_id()\fP'\&. here under speudo code: 
.PP
.nf
        UIView* display = [[UIView alloc] init];
        UIView* preview = [[UIView alloc] init];
        linphone_core_set_native_video_window_id(lc,(unsigned long)display);    
        linphone_core_set_native_preview_window_id(lc,(unsigned long)preview);

.fi
.PP
 
.br
 Screen rotations are also handled by liblinphone'\&. 2 positions are currently supported, namely \fIUIInterfaceOrientationPortrait\fP and \fIUIInterfaceOrientationLandscapeRight\fP'\&. Applications may invoke \fBlinphone_core_set_device_rotation()\fP followed by \fBlinphone_core_update_call()\fP to notify liblinphone of an orientation change'\&. Here under a speudo code to handle orientation changes 
.PP
.nf
-(void) configureOrientation:(UIInterfaceOrientation) oritentation  {
        int oldLinphoneOrientation = linphone_core_get_device_rotation(lc);
        if (oritentation == UIInterfaceOrientationPortrait ) {
                linphone_core_set_native_video_window_id(lc,(unsigned long)display-portrait);   
                linphone_core_set_native_preview_window_id(lc,(unsigned long)preview-portrait);
                linphone_core_set_device_rotation(lc, 0);
                
        } else if (oritentation == UIInterfaceOrientationLandscapeRight ) {
                linphone_core_set_native_video_window_id(lc,(unsigned long)display-landscape);  
                linphone_core_set_native_preview_window_id(lc,(unsigned long)preview-landscape);
                linphone_core_set_device_rotation(lc, 270);
        }
        
        if ((oldLinphoneOrientation != linphone_core_get_device_rotation(lc))
                && linphone_core_get_current_call(lc)) {
                //Orientation has changed, must call update call
                linphone_core_update_call(lc, linphone_core_get_current_call(lc), NULL);
        }
}

.fi
.PP
.PP
\fBDTMF feebacks\fP 
.br
Liblinphone provides functions \fBto play dtmf \fP to the local user'\&. Usually this is used to play a sound when the user presses a digit, inside or outside of any call'\&. On IOS, libLinphone relies on AudioUnits for interfacing with the audio system'\&. Unfortunately the Audio Unit initialization is a quite long operation that may trigger a bad user experience if performed each time a DTMF is played, the sound being delayed half a second after the press'\&. To solve this issue and thus insure real-time precision, liblinphone introduces 2 functions for \fBpreloading \fP and \fBunloading \fP the underlying audio graph responsible for playing DTMFs'\&. 
.br
 For an application using function \fBlinphone_core_play_dtmf()\fP, it is recommanded to call \fBlinphone_core_start_dtmf_stream()\fP when entering in foreground and \fBlinphone_core_stop_dtmf_stream()\fP upon entering background mode'\&. 
.SH "Function Documentation"
.PP 
.SS "void linphone_core_start_dtmf_stream (\fBLinphoneCore\fP *lc)"Special function to warm up dtmf feeback stream'\&. \fBlinphone_core_stop_dtmf_stream\fP must() be called before entering FG mode 
.SS "void linphone_core_stop_dtmf_stream (\fBLinphoneCore\fP *lc)"Special function to stop dtmf feed back function'\&. Must be called before entering BG mode 
.SH "Author"
.PP 
Generated automatically by Doxygen for liblinphone from the source code'\&.
