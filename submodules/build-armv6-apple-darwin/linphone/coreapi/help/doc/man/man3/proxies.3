.TH "Managing proxies" 3 "Mon Feb 6 2012" "Version 3.5.0" "liblinphone" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Managing proxies \- 
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct _LinphoneProxyConfig \fBLinphoneProxyConfig\fP"
.br
.ti -1c
.RI "typedef enum 
.br
\fB_LinphoneRegistrationState\fP \fBLinphoneRegistrationState\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_LinphoneRegistrationState\fP { \fBLinphoneRegistrationNone\fP, \fBLinphoneRegistrationProgress\fP, \fBLinphoneRegistrationOk\fP, \fBLinphoneRegistrationCleared\fP, \fBLinphoneRegistrationFailed\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBlinphone_core_set_primary_contact\fP (\fBLinphoneCore\fP *lc, const char *contact)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_primary_contact\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_guess_hostname\fP (\fBLinphoneCore\fP *lc, bool_t val)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_get_guess_hostname\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "\fBLinphoneAddress\fP * \fBlinphone_core_get_primary_contact_parsed\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_identity\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "const char * \fBlinphone_registration_state_to_string\fP (\fBLinphoneRegistrationState\fP cs)"
.br
.ti -1c
.RI "\fBLinphoneProxyConfig\fP * \fBlinphone_proxy_config_new\fP (void)"
.br
.ti -1c
.RI "int \fBlinphone_proxy_config_set_server_addr\fP (\fBLinphoneProxyConfig\fP *obj, const char *server_addr)"
.br
.ti -1c
.RI "int \fBlinphone_proxy_config_set_identity\fP (\fBLinphoneProxyConfig\fP *obj, const char *identity)"
.br
.ti -1c
.RI "int \fBlinphone_proxy_config_set_route\fP (\fBLinphoneProxyConfig\fP *obj, const char *route)"
.br
.ti -1c
.RI "void \fBlinphone_proxy_config_expires\fP (\fBLinphoneProxyConfig\fP *obj, int expires)"
.br
.ti -1c
.RI "void \fBlinphone_proxy_config_enable_register\fP (\fBLinphoneProxyConfig\fP *obj, bool_t val)"
.br
.ti -1c
.RI "void \fBlinphone_proxy_config_edit\fP (\fBLinphoneProxyConfig\fP *obj)"
.br
.ti -1c
.RI "int \fBlinphone_proxy_config_done\fP (\fBLinphoneProxyConfig\fP *obj)"
.br
.ti -1c
.RI "void \fBlinphone_proxy_config_enable_publish\fP (\fBLinphoneProxyConfig\fP *obj, bool_t val)"
.br
.ti -1c
.RI "void \fBlinphone_proxy_config_set_dial_escape_plus\fP (\fBLinphoneProxyConfig\fP *cfg, bool_t val)"
.br
.ti -1c
.RI "void \fBlinphone_proxy_config_set_dial_prefix\fP (\fBLinphoneProxyConfig\fP *cfg, const char *prefix)"
.br
.ti -1c
.RI "bool_t \fBlinphone_proxy_config_is_registered\fP (const \fBLinphoneProxyConfig\fP *obj)"
.br
.ti -1c
.RI "const char * \fBlinphone_proxy_config_get_route\fP (const \fBLinphoneProxyConfig\fP *obj)"
.br
.ti -1c
.RI "const char * \fBlinphone_proxy_config_get_identity\fP (const \fBLinphoneProxyConfig\fP *obj)"
.br
.ti -1c
.RI "bool_t \fBlinphone_proxy_config_publish_enabled\fP (const \fBLinphoneProxyConfig\fP *obj)"
.br
.ti -1c
.RI "const char * \fBlinphone_proxy_config_get_addr\fP (const \fBLinphoneProxyConfig\fP *obj)"
.br
.ti -1c
.RI "int \fBlinphone_proxy_config_get_expires\fP (const \fBLinphoneProxyConfig\fP *obj)"
.br
.ti -1c
.RI "bool_t \fBlinphone_proxy_config_register_enabled\fP (const \fBLinphoneProxyConfig\fP *obj)"
.br
.ti -1c
.RI "void \fBlinphone_proxy_config_refresh_register\fP (\fBLinphoneProxyConfig\fP *obj)"
.br
.ti -1c
.RI "bool_t \fBlinphone_proxy_config_get_dial_escape_plus\fP (const \fBLinphoneProxyConfig\fP *cfg)"
.br
.ti -1c
.RI "const char * \fBlinphone_proxy_config_get_dial_prefix\fP (const \fBLinphoneProxyConfig\fP *cfg)"
.br
.ti -1c
.RI "void \fBlinphone_proxy_config_destroy\fP (\fBLinphoneProxyConfig\fP *cfg)"
.br
.ti -1c
.RI "int \fBlinphone_proxy_config_normalize_number\fP (\fBLinphoneProxyConfig\fP *proxy, const char *username, char *result, size_t result_len)"
.br
.ti -1c
.RI "void \fBlinphone_core_refresh_registers\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_add_proxy_config\fP (\fBLinphoneCore\fP *lc, \fBLinphoneProxyConfig\fP *cfg)"
.br
.ti -1c
.RI "void \fBlinphone_core_remove_proxy_config\fP (\fBLinphoneCore\fP *lc, \fBLinphoneProxyConfig\fP *cfg)"
.br
.ti -1c
.RI "void \fBlinphone_core_clear_proxy_config\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_default_proxy\fP (\fBLinphoneCore\fP *lc, \fBLinphoneProxyConfig\fP *config)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_default_proxy\fP (\fBLinphoneCore\fP *lc, \fBLinphoneProxyConfig\fP **config)"
.br
.ti -1c
.RI "const MSList * \fBlinphone_core_get_proxy_config_list\fP (const \fBLinphoneCore\fP *lc)"
.br
.in -1c
.SH "Detailed Description"
.PP 
User registration is controled by \fBLinphoneProxyConfig\fP settings'\&.
.br
 Each \fBLinphoneProxyConfig\fP object can be configured with registration informations like \fBproxy address \fP , \fBuser id \fP, \fBrefresh period \fP, and so on'\&. 
.br
 A created proxy config using \fBlinphone_proxy_config_new()\fP, once configured, must be added to \fBLinphoneCore\fP using function \fBlinphone_core_add_proxy_config()\fP'\&. 
.br
 It is recommended to set a default \fBproxy config \fP using function \fBlinphone_core_set_default_proxy()\fP'\&. Once done, if \fBa proxy config \fP has been configured with attribute \fBenable register \fP , next call to \fBlinphone_core_iterate()\fP triggers a SIP register'\&. 
.br
 Registration status is reported by \fBLinphoneRegistrationStateCb\fP'\&. 
.br
 
.br
 This pseudo code demonstrates basic registration operations: 
.br
 
.PP
.nf
        
        LinphoneProxyConfig* proxy_cfg;
        /*create proxy config*/
        proxy_cfg = linphone_proxy_config_new();
        /*parse identity*/
        LinphoneAddress *from = linphone_address_new('sip:toto@sip\&.titi\&.com');
        LinphoneAuthInfo *info;
        if (password!=NULL){
                info=linphone_auth_info_new(linphone_address_get_username(from),NULL,'secret',NULL,NULL); /*create authentication structure from identity*/
                linphone_core_add_auth_info(lc,info); /*add authentication info to LinphoneCore*/
        }       
        // configure proxy entries
        linphone_proxy_config_set_identity(proxy_cfg,identity); /*set identity with user name and domain*/
        const char* server_addr = linphone_address_get_domain(from); /*extract domain address from identity*/
        linphone_proxy_config_set_server_addr(proxy_cfg,server_addr); /* we assume domain = proxy server address*/
        linphone_proxy_config_enable_register(proxy_cfg,TRUE); /*activate registration for this proxy config*/
        linphone_address_destroy(from); /*release resource*/
        
        linphone_core_add_proxy_config(lc,proxy_cfg); /*add proxy config to linphone core*/
        linphone_core_set_default_proxy(lc,proxy_cfg); /*set to default proxy*/ 

.fi
.PP
 
.br
 Registration sate call back: 
.PP
.nf
 static void registration_state_changed(struct _LinphoneCore *lc, LinphoneProxyConfig *cfg, LinphoneRegistrationState cstate, const char *message){
                printf('New registration state %s for user id [%s] at proxy [%s]\n'
                                ,linphone_registration_state_to_string(cstate)
                                ,linphone_proxy_config_get_identity(cfg)
                                ,linphone_proxy_config_get_addr(cfg));
}

.fi
.PP
 
.br
\fBAuthentication:\fP 
.br
Most of the time, registration requires \fBauthentication\fP to succed'\&. \fBLinphoneAuthInfo\fP info must be either added to \fBLinphoneCore\fP using function \fBlinphone_core_add_auth_info()\fP before \fBLinphoneProxyConfig\fP is added to Linphone core, or on demand from call back \fBAuthInfoRequested\fP '\&. 
.br
 
.br
\fBUnregistration:\fP 
.br
 Unregistration or any changes to \fBLinphoneProxyConfig\fP must be first started by a call to function \fBlinphone_proxy_config_edit()\fP and validated by function \fBlinphone_proxy_config_done()\fP 
.br
 This pseudo code shows how to unregister a user associated to a \fBLinphoneProxyConfig\fP 
.PP
.nf
        LinphoneProxyConfig* proxy_cfg;
        linphone_core_get_default_proxy(lc,&proxy_cfg); /* get default proxy config*/
        linphone_proxy_config_edit(proxy_cfg); /*start editing proxy configuration*/
        linphone_proxy_config_enable_register(proxy_cfg,FALSE); /*de-activate registration for this proxy config*/
        linphone_proxy_config_done(proxy_cfg); /*initiate REGISTER with expire = 0*/

.fi
.PP
 
.br
 A complete tutorial can be found at : \fBRegistration tutorial\fP 
.SH "Typedef Documentation"
.PP 
.SS "typedef struct _LinphoneProxyConfig \fBLinphoneProxyConfig\fP"The LinphoneProxyConfig object represents a proxy configuration to be used by the LinphoneCore object'\&. Its fields must not be used directly in favour of the accessors methods'\&. Once created and filled properly the LinphoneProxyConfig can be given to LinphoneCore with \fBlinphone_core_add_proxy_config()\fP'\&. This will automatically triggers the registration, if enabled'\&.
.PP
The proxy configuration are persistent to restarts because they are saved in the configuration file'\&. As a consequence, after \fBlinphone_core_new()\fP there might already be a list of configured proxy that can be examined with \fBlinphone_core_get_proxy_config_list()\fP'\&.
.PP
The default proxy (see \fBlinphone_core_set_default_proxy()\fP ) is the one of the list that is used by default for calls'\&. 
.SS "typedef enum \fB_LinphoneRegistrationState\fP \fBLinphoneRegistrationState\fP"LinphoneRegistrationState describes proxy registration states'\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fB_LinphoneRegistrationState\fP"LinphoneRegistrationState describes proxy registration states'\&. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fILinphoneRegistrationNone \fP\fP
Initial state for registrations 
.TP
\fB\fILinphoneRegistrationProgress \fP\fP
Registration is in progress 
.TP
\fB\fILinphoneRegistrationOk \fP\fP
Registration is successful 
.TP
\fB\fILinphoneRegistrationCleared \fP\fP
Unregistration succeeded 
.TP
\fB\fILinphoneRegistrationFailed \fP\fP
Registration failed 
.SH "Function Documentation"
.PP 
.SS "int linphone_core_set_primary_contact (\fBLinphoneCore\fP *lc, const char *contact)"Sets the local 'from' identity'\&.
.PP
This data is used in absence of any proxy configuration or when no default proxy configuration is set'\&. See LinphoneProxyConfig 
.SS "const char* linphone_core_get_primary_contact (\fBLinphoneCore\fP *lc)"Returns the default identity when no proxy configuration is used'\&. 
.SS "void linphone_core_set_guess_hostname (\fBLinphoneCore\fP *lc, bool_tval)"Tells LinphoneCore to guess local hostname automatically in primary contact'\&. 
.SS "bool_t linphone_core_get_guess_hostname (\fBLinphoneCore\fP *lc)"Returns TRUE if hostname part of primary contact is guessed automatically'\&. 
.SS "\fBLinphoneAddress\fP* linphone_core_get_primary_contact_parsed (\fBLinphoneCore\fP *lc)"Same as \fBlinphone_core_get_primary_contact()\fP but the result is a LinphoneAddress object instead of const char* 
.SS "const char * linphone_core_get_identity (\fBLinphoneCore\fP *lc)"Returns the default identity SIP address'\&.
.PP
This is an helper function:
.PP
If no default proxy is set, this will return the primary contact ( see \fBlinphone_core_get_primary_contact()\fP )'\&. If a default proxy is set it returns the registered identity on the proxy'\&. 
.SS "const char* linphone_registration_state_to_string (\fBLinphoneRegistrationState\fPcs)"Human readable version of the \fBLinphoneRegistrationState\fP 
.PP
\fBParameters:\fP
.RS 4
\fIcs\fP sate 
.RE
.PP

.SS "\fBLinphoneProxyConfig\fP * linphone_proxy_config_new ()"Creates an empty proxy config'\&. 
.SS "int linphone_proxy_config_set_server_addr (\fBLinphoneProxyConfig\fP *obj, const char *server_addr)"Sets the proxy address
.PP
Examples of valid sip proxy address are:
.IP "\(bu" 2
IP address: sip:87'\&.98'\&.157'\&.38
.IP "\(bu" 2
IP address with port: sip:87'\&.98'\&.157'\&.38:5062
.IP "\(bu" 2
hostnames : sip:sip'\&.example'\&.net 
.PP

.SS "int linphone_proxy_config_set_identity (\fBLinphoneProxyConfig\fP *obj, const char *identity)"Sets the user identity as a SIP address'\&.
.PP
This identity is normally formed with display name, username and domain, such as: Alice <sip:alice@example.net> The REGISTER messages will have from and to set to this identity'\&. 
.SS "int linphone_proxy_config_set_route (\fBLinphoneProxyConfig\fP *obj, const char *route)"Sets a SIP route'\&. When a route is set, all outgoing calls will go to the route's destination if this proxy is the default one (see \fBlinphone_core_set_default_proxy()\fP )'\&. 
.SS "void linphone_proxy_config_expires (\fBLinphoneProxyConfig\fP *obj, intval)"Sets the registration expiration time in seconds'\&. 
.SS "void linphone_proxy_config_enable_register (\fBLinphoneProxyConfig\fP *obj, bool_tval)"Indicates either or not, REGISTRATION must be issued for this \fBLinphoneProxyConfig\fP '\&. 
.br
 In case this \fBLinphoneProxyConfig\fP has been added to \fBLinphoneCore\fP, follows the \fBlinphone_proxy_config_edit()\fP rule'\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP object pointer 
.br
\fIval\fP if true, registration will be engaged
.RE
.PP
Indicates whether a REGISTER request must be sent to the proxy'\&. 
.SS "void linphone_proxy_config_edit (\fBLinphoneProxyConfig\fP *obj)"Starts editing a proxy configuration'\&.
.PP
Because proxy configuration must be consistent, applications MUST call \fBlinphone_proxy_config_edit()\fP before doing any attempts to modify proxy configuration (such as identity, proxy address and so on)'\&. Once the modifications are done, then the application must call \fBlinphone_proxy_config_done()\fP to commit the changes'\&. 
.SS "int linphone_proxy_config_done (\fBLinphoneProxyConfig\fP *obj)"Commits modification made to the proxy configuration'\&. 
.SS "void linphone_proxy_config_enable_publish (\fBLinphoneProxyConfig\fP *obj, bool_tval)"Indicates either or not, PUBLISH must be issued for this \fBLinphoneProxyConfig\fP '\&. 
.br
 In case this \fBLinphoneProxyConfig\fP has been added to \fBLinphoneCore\fP, follows the \fBlinphone_proxy_config_edit()\fP rule'\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP object pointer 
.br
\fIval\fP if true, publish will be engaged 
.RE
.PP

.SS "void linphone_proxy_config_set_dial_escape_plus (\fBLinphoneProxyConfig\fP *cfg, bool_tval)"Sets whether liblinphone should replace '+' by '00' in dialed numbers (passed to \fBlinphone_core_invite\fP )'\&. 
.SS "void linphone_proxy_config_set_dial_prefix (\fBLinphoneProxyConfig\fP *cfg, const char *prefix)"Sets a dialing prefix to be automatically prepended when inviting a number with \fBlinphone_core_invite\fP'\&. 
.SS "bool_t linphone_proxy_config_is_registered (const \fBLinphoneProxyConfig\fP *obj)"Returns a boolean indicating that the user is sucessfully registered on the proxy'\&. 
.SS "const char * linphone_proxy_config_get_route (const \fBLinphoneProxyConfig\fP *obj)"Returns the route set for this proxy configuration'\&. 
.SS "const char * linphone_proxy_config_get_identity (const \fBLinphoneProxyConfig\fP *obj)"Returns the SIP identity that belongs to this proxy configuration'\&.
.PP
The SIP identity is a SIP address (Display Name <sip:username> ) 
.SS "bool_t linphone_proxy_config_publish_enabled (const \fBLinphoneProxyConfig\fP *obj)"Returns TRUE if PUBLISH request is enabled for this proxy'\&. 
.SS "const char * linphone_proxy_config_get_addr (const \fBLinphoneProxyConfig\fP *obj)"Returns the proxy's SIP address'\&. 
.SS "int linphone_proxy_config_get_expires (const \fBLinphoneProxyConfig\fP *obj)"Returns the duration of registration'\&. 
.SS "bool_t linphone_proxy_config_register_enabled (const \fBLinphoneProxyConfig\fP *obj)"Returns TRUE if registration to the proxy is enabled'\&. 
.SS "void linphone_proxy_config_refresh_register (\fBLinphoneProxyConfig\fP *obj)"Refresh a proxy registration'\&. This is useful if for example you resuming from suspend, thus IP address may have changed'\&. 
.SS "bool_t linphone_proxy_config_get_dial_escape_plus (const \fBLinphoneProxyConfig\fP *cfg)"Returns whether liblinphone should replace '+' by '00' in dialed numbers (passed to \fBlinphone_core_invite\fP )'\&. 
.SS "const char * linphone_proxy_config_get_dial_prefix (const \fBLinphoneProxyConfig\fP *cfg)"Returns dialing prefix'\&. 
.SS "void linphone_proxy_config_destroy (\fBLinphoneProxyConfig\fP *obj)"Destroys a proxy config'\&.
.PP
\fBNote:\fP
.RS 4
: LinphoneProxyConfig that have been removed from LinphoneCore with \fBlinphone_core_remove_proxy_config()\fP must not be freed'\&. 
.RE
.PP

.SS "int linphone_proxy_config_normalize_number (\fBLinphoneProxyConfig\fP *proxy, const char *username, char *result, size_tresult_len)"normalize a human readable phone number into a basic string'\&. 888-444-222 becomes 888444222 
.SS "void linphone_core_refresh_registers (\fBLinphoneCore\fP *lc)"force registration refresh to be initiated upon next iterate 
.SS "int linphone_core_add_proxy_config (\fBLinphoneCore\fP *lc, \fBLinphoneProxyConfig\fP *cfg)"Add a proxy configuration'\&. This will start registration on the proxy, if registration is enabled'\&. 
.SS "void linphone_core_remove_proxy_config (\fBLinphoneCore\fP *lc, \fBLinphoneProxyConfig\fP *cfg)"Removes a proxy configuration'\&.
.PP
LinphoneCore will then automatically unregister and place the proxy configuration on a deleted list'\&. For that reason, a removed proxy does NOT need to be freed'\&. 
.SS "void linphone_core_clear_proxy_config (\fBLinphoneCore\fP *lc)"Erase all proxies from config'\&. 
.SS "void linphone_core_set_default_proxy (\fBLinphoneCore\fP *lc, \fBLinphoneProxyConfig\fP *config)"Sets the default proxy'\&.
.PP
This default proxy must be part of the list of already entered LinphoneProxyConfig'\&. Toggling it as default will make LinphoneCore use the identity associated with the proxy configuration in all incoming and outgoing calls'\&. 
.SS "int linphone_core_get_default_proxy (\fBLinphoneCore\fP *lc, \fBLinphoneProxyConfig\fP **config)"Returns the default proxy configuration, that is the one used to determine the current identity'\&. 
.SS "const MSList* linphone_core_get_proxy_config_list (const \fBLinphoneCore\fP *lc)"Returns an unmodifiable list of entered proxy configurations'\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for liblinphone from the source code'\&.
